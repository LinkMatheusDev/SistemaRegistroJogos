#!/bin/bash

echo "üê≥=============================================="
echo "    Sistema de Registro de Jogos v2.0"
echo "           Docker Setup"
echo "==============================================="

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Por favor, instale o Docker Desktop."
    echo "   üì• Download: https://www.docker.com/products/docker-desktop/"
    exit 1
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null 2>&1; then
    echo "‚ùå Docker Compose n√£o encontrado."
    exit 1
fi

echo "‚úÖ Docker detectado"

# Fun√ß√£o para escolher comando compose
get_compose_cmd() {
    if command -v docker-compose &> /dev/null; then
        echo "docker-compose"
    else
        echo "docker compose"
    fi
}

COMPOSE_CMD=$(get_compose_cmd)
echo "‚úÖ Usando comando: $COMPOSE_CMD"

# Menu de op√ß√µes
show_menu() {
    echo ""
    echo "üìã Op√ß√µes dispon√≠veis:"
    echo "   1. üöÄ Iniciar servi√ßos (PostgreSQL + pgAdmin)"
    echo "   2. üõë Parar servi√ßos"
    echo "   3. üîÑ Reiniciar servi√ßos"
    echo "   4. üìä Ver status dos servi√ßos"
    echo "   5. üìã Ver logs"
    echo "   6. üßπ Limpar tudo (CUIDADO: Remove dados!)"
    echo "   7. üíæ Backup do banco"
    echo "   8. üîó Informa√ß√µes de conex√£o"
    echo "   9. ‚ùå Sair"
    echo ""
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    echo "üöÄ Iniciando servi√ßos Docker..."
    
    # Criar diret√≥rio para banco se n√£o existir
    mkdir -p database
    
    $COMPOSE_CMD up -d
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Servi√ßos iniciados com sucesso!"
        echo ""
        echo "üìä Aguardando inicializa√ß√£o do PostgreSQL..."
        sleep 10
        
        # Verificar se PostgreSQL est√° funcionando
        docker exec jogos_postgres pg_isready -U jogos_user -d sistemaregistrojogos > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "‚úÖ PostgreSQL est√° funcionando!"
            show_connection_info
        else
            echo "‚ö†Ô∏è  PostgreSQL ainda est√° inicializando. Aguarde alguns momentos."
            echo "   Execute novamente 'Informa√ß√µes de conex√£o' em alguns minutos."
        fi
    else
        echo "‚ùå Erro ao iniciar servi√ßos"
    fi
}

# Fun√ß√£o para parar servi√ßos
stop_services() {
    echo "üõë Parando servi√ßos..."
    $COMPOSE_CMD down
    echo "‚úÖ Servi√ßos parados"
}

# Fun√ß√£o para reiniciar servi√ßos
restart_services() {
    echo "üîÑ Reiniciando servi√ßos..."
    $COMPOSE_CMD restart
    echo "‚úÖ Servi√ßos reiniciados"
}

# Fun√ß√£o para ver status
show_status() {
    echo "üìä Status dos servi√ßos:"
    $COMPOSE_CMD ps
}

# Fun√ß√£o para ver logs
show_logs() {
    echo "üìã Logs dos servi√ßos:"
    echo "   Digite Ctrl+C para sair"
    $COMPOSE_CMD logs -f
}

# Fun√ß√£o para limpar tudo
clean_all() {
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o ir√° remover TODOS os dados!"
    read -p "   Digite 'CONFIRMAR' para continuar: " confirm
    
    if [ "$confirm" = "CONFIRMAR" ]; then
        echo "üßπ Removendo containers, volumes e dados..."
        $COMPOSE_CMD down -v
        docker volume prune -f
        echo "‚úÖ Limpeza conclu√≠da"
    else
        echo "‚ùå Opera√ß√£o cancelada"
    fi
}

# Fun√ß√£o para backup
backup_database() {
    echo "üíæ Criando backup do banco de dados..."
    
    # Verificar se PostgreSQL est√° rodando
    if ! docker exec jogos_postgres pg_isready -U jogos_user -d sistemaregistrojogos > /dev/null 2>&1; then
        echo "‚ùå PostgreSQL n√£o est√° funcionando. Inicie os servi√ßos primeiro."
        return
    fi
    
    BACKUP_FILE="backup_jogos_$(date +%Y%m%d_%H%M%S).sql"
    
    docker exec jogos_postgres pg_dump -U jogos_user -d sistemaregistrojogos > "$BACKUP_FILE"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Backup criado: $BACKUP_FILE"
        echo "   Tamanho: $(du -h "$BACKUP_FILE" | cut -f1)"
    else
        echo "‚ùå Erro ao criar backup"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes de conex√£o
show_connection_info() {
    echo ""
    echo "üîó INFORMA√á√ïES DE CONEX√ÉO:"
    echo "=================================================="
    echo ""
    echo "üìä PostgreSQL:"
    echo "   Host: localhost"
    echo "   Port: 5432"
    echo "   Database: sistemaregistrojogos"
    echo "   Username: jogos_user"
    echo "   Password: jogos_password"
    echo "   Schema: jogos_app"
    echo ""
    echo "üåê pgAdmin (Interface Web):"
    echo "   URL: http://localhost:8080"
    echo "   Email: admin@jogos.com"
    echo "   Password: admin123"
    echo ""
    echo "üì± Redis (Cache):"
    echo "   Host: localhost"
    echo "   Port: 6379"
    echo ""
    echo "üîå String de Conex√£o JDBC:"
    echo "   jdbc:postgresql://localhost:5432/sistemaregistrojogos"
    echo ""
    echo "üí° Para conectar via psql:"
    echo "   psql -h localhost -p 5432 -U jogos_user -d sistemaregistrojogos"
    echo ""
    echo "=================================================="
}

# Loop principal
while true; do
    show_menu
    read -p "Escolha uma op√ß√£o (1-9): " choice
    
    case $choice in
        1)
            start_services
            ;;
        2)
            stop_services
            ;;
        3)
            restart_services
            ;;
        4)
            show_status
            ;;
        5)
            show_logs
            ;;
        6)
            clean_all
            ;;
        7)
            backup_database
            ;;
        8)
            show_connection_info
            ;;
        9)
            echo "üëã Saindo..."
            exit 0
            ;;
        *)
            echo "‚ùå Op√ß√£o inv√°lida. Escolha entre 1-9."
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
done 